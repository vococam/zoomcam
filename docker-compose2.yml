version: '3.8'

services:
  # ==================================================
  # ZoomCam Main Application
  # ==================================================
  zoomcam:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: zoomcam-app
    restart: unless-stopped

    # Port mapping
    ports:
      - "8000:8000"    # Web interface

    # Environment variables
    environment:
      - ZOOMCAM_ENV=production
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Warsaw

    # Volume mounts
    volumes:
      # Configuration
      - ./config:/app/config:ro
      # Persistent data
      - zoomcam-data:/var/lib/zoomcam
      - zoomcam-logs:/app/logs
      - zoomcam-recordings:/app/recordings
      # HLS streaming (tmpfs for performance)
      - type: tmpfs
        target: /tmp/zoomcam_hls
        tmpfs:
          size: 1G
      # Camera devices (for USB cameras)
      - /dev/video0:/dev/video0
      - /dev/video1:/dev/video1
      - /dev/video2:/dev/video2
      - /dev/video3:/dev/video3

    # Device access
    devices:
      - /dev/video0:/dev/video0
      - /dev/video1:/dev/video1
      - /dev/video2:/dev/video2
      - /dev/video3:/dev/video3

    # Privileged mode for camera access
    privileged: false

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          memory: 256M

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

    # Network
    networks:
      - zoomcam-network

    # Dependencies
    depends_on:
      - redis
      - nginx

  # ==================================================
  # Redis for caching and session storage
  # ==================================================
  redis:
    image: redis:7-alpine
    container_name: zoomcam-redis
    restart: unless-stopped

    # Configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

    # Volumes
    volumes:
      - redis-data:/data

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

    # Network
    networks:
      - zoomcam-network

  # ==================================================
  # Nginx reverse proxy and static file serving
  # ==================================================
  nginx:
    image: nginx:alpine
    container_name: zoomcam-nginx
    restart: unless-stopped

    # Port mapping
    ports:
      - "80:80"
      - "443:443"

    # Configuration
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites/:/etc/nginx/conf.d/:ro
      - ./docker/ssl/:/etc/nginx/ssl/:ro
      - zoomcam-logs:/var/log/zoomcam:ro
      - zoomcam-recordings:/var/www/recordings:ro

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

    # Network
    networks:
      - zoomcam-network

    # Dependencies
    depends_on:
      - zoomcam

  # ==================================================
  # InfluxDB for metrics (optional)
  # ==================================================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: zoomcam-influxdb
    restart: unless-stopped
    profiles:
      - monitoring

    # Environment
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=zoomcam123
      - DOCKER_INFLUXDB_INIT_ORG=zoomcam
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics

    # Volumes
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2

    # Ports
    ports:
      - "8086:8086"

    # Network
    networks:
      - zoomcam-network

  # ==================================================
  # Grafana for dashboards (optional)
  # ==================================================
  grafana:
    image: grafana/grafana:latest
    container_name: zoomcam-grafana
    restart: unless-stopped
    profiles:
      - monitoring

    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=zoomcam123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource

    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    # Ports
    ports:
      - "3000:3000"

    # Network
    networks:
      - zoomcam-network

    # Dependencies
    depends_on:
      - influxdb

  # ==================================================
  # Portainer for container management (optional)
  # ==================================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: zoomcam-portainer
    restart: unless-stopped
    profiles:
      - management

    # Volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

    # Ports
    ports:
      - "9000:9000"

    # Network
    networks:
      - zoomcam-network

# ==================================================
# Named Volumes
# ==================================================
volumes:
  zoomcam-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data

  zoomcam-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

  zoomcam-recordings:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./recordings

  redis-data:
    driver: local

  influxdb-data:
    driver: local

  influxdb-config:
    driver: local

  grafana-data:
    driver: local

  portainer-data:
    driver: local

# ==================================================
# Networks
# ==================================================
networks:
  zoomcam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16